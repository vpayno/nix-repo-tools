# shellcheck shell=bash

# version: 20250925.0.5

for d in "${HOME}"/.nix-profile/bin /etc/profiles/per-user/vpayno/bin /run/current-system/sw/bin /nix/var/nix/profiles/default/bin; do
	if [[ -d ${d} ]]; then
		export PATH="${d}:${PATH}"
	fi
done

printf "direnv: sourcing ./.envrc ...\n"
printf "\n"

declare DEP_PATH
DEP_PATH="$(nix build --no-link --print-out-paths nixpkgs#jq^bin)/bin"
DEP_PATH+=":$(nix build --no-link --print-out-paths nixpkgs#coreutils)/bin"
DEP_PATH+=":$(nix build --no-link --print-out-paths nixpkgs#gum)/bin"
DEP_PATH+=":$(nix build --no-link --print-out-paths nixpkgs#devbox)/bin"
DEP_PATH+=":$(nix build --no-link --print-out-paths github:vpayno/nix-misc-tools#current-system)/bin"

export PATH="${DEP_PATH}:${PATH}"

declare devshell_default="nix develop .#default"
#declare devshell_default="devbox shell"

declare answer
declare system_label

# https://github.com/nix-community/nix-direnv/releases
declare nix_direnv_ver="3.1.0"
declare nix_direnv_sha="sha256-yMJ2OVMzrFaDPn7q8nCBZFRYpL/f0RcHzhmw/i6btJM="

declare -i i=0

declare devshell
declare -a devshells

declare -a options
declare options_delimiter="|"
declare option_prompt="direnv: which environment would you like to use?"
declare -a parts
declare skip_option

declare regex_nix="^nix develop "
declare regex_devbox="^devbox shell"

printf -v system_label "%s" "$(current-system)"

printf "Running on %s\n" "${system_label}"

printf "Inspecting flake...\n\n"
mapfile -t devshells < <({ nix flake show --json 2>/dev/null | jq -r --arg system "${system_label}" '.devShells[$system] | keys[]'; })

printf "Found %d nix develop devShells\n\n" "${#devshells[@]}"

if [[ ${#devshells[@]} -gt 0 ]]; then
	i=0
	for devshell in "${devshells[@]}"; do
		options+=("$(printf "nix develop .#%s%s%s\n" "${devshell}" "${options_delimiter}" "${i}")")
		((i += 1))
	done
fi

if [[ -f devbox.json ]]; then
	printf "Found devbox shell.\n\n"

	options+=("$(printf "devbox shell%s%s\n" "${options_delimiter}" "${i}")")
	((i += 1))
fi

skip_option="skip|${i}"
options+=("${skip_option}")

# answer is the index of the array
answer="$(gum choose --select-if-one --selected="${devshell_default}" --header="${option_prompt}" --label-delimiter="${options_delimiter}" "${options[@]}")"
printf "\n"

# When ESC is pressed, answer is blank so we need to map that to the skip option.
: "${answer:=${skip_option}}"

# shell command|array index
printf "Selection: %s\n" "${options[${answer}]%%|*}"
printf "\n"

# if starts with nix develop, else if devbox shell else skip
if [[ ${options[${answer}]} =~ ${regex_nix} ]]; then
	if ! has nix_direnv_version || ! nix_direnv_version "${nix_direnv_ver}"; then
		source_url "https://raw.githubusercontent.com/nix-community/nix-direnv/${nix_direnv_ver}/direnvrc" "${nix_direnv_sha}"
	fi

	read -r -a parts <<<"${options[${answer}]%%|*}"
	use flake "${parts[@]: -1}" --refresh
elif [[ ${options[${answer}]} =~ ${regex_devbox} ]]; then
	# Automatically sets up your devbox environment whenever you cd into this
	# directory via our direnv integration:

	eval "$(devbox generate direnv --print-envrc)"

	# check out https://www.jetpack.io/devbox/docs/ide_configuration/direnv/
	# for more details
else
	printf "\n"
	printf "Not starting a developer environment.\n"
	printf "\n"

	exit 0
fi

exit 0
